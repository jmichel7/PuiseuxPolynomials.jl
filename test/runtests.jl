# auto-generated tests from julia-repl docstrings
using Test, PuiseuxPolynomials
function mytest(f::String,a::String,b::String)
  println(f," ",a)
  omit=a[end]==';'
  a=replace(a,"\\\\"=>"\\")
  a=repr(MIME("text/plain"),eval(Meta.parse(a)),context=:limit=>true)
  if omit a="nothing" end
  a=replace(a,r" *(\n|$)"s=>s"\1")
  a=replace(a,r"\n$"s=>"")
  b=replace(b,r" *(\n|$)"s=>s"\1")
  b=replace(b,r"\n$"s=>"")
  i=1
  while i<=lastindex(a) && i<=lastindex(b) && a[i]==b[i]
    i=nextind(a,i)
  end
  if a!=b print("exec=$(repr(a[i:end]))\nmanl=$(repr(b[i:end]))\n") end
  a==b
end
@testset verbose = true "Gapjm" begin
@testset "PuiseuxPolynomials.jl" begin
@test mytest("PuiseuxPolynomials.jl","@Mvp x,y","nothing")
@test mytest("PuiseuxPolynomials.jl","(x+y^-1)^3","Mvp{Int64}: x³+3x²y⁻¹+3xy⁻²+y⁻³")
@test mytest("PuiseuxPolynomials.jl","x+Mvp(:z)","Mvp{Int64}: x+z")
@test mytest("PuiseuxPolynomials.jl","x^(1//2)","Mvp{Int64,Rational{Int64}}: x½")
@test mytest("PuiseuxPolynomials.jl","Mvp(3)","Mvp{Int64}: 3")
@test mytest("PuiseuxPolynomials.jl","repr(3x*y^-2+4)","\"Mvp(Monomial(:x, :y => -2) => 3, Monomial() => 4)\"")
@test mytest("PuiseuxPolynomials.jl","repr(x^(1//2))","\"Mvp(Monomial(:x => 1//2))\"")
@test mytest("PuiseuxPolynomials.jl","(4x)^(1//2)","Mvp{Int64,Rational{Int64}}: 2x½")
@test mytest("PuiseuxPolynomials.jl","(2.0x)^(1//2)","Mvp{Float64,Rational{Int64}}: 1.4142135623730951x½")
@test mytest("PuiseuxPolynomials.jl","root(2.0x)","Mvp{Float64,Rational{Int64}}: 1.4142135623730951x½")
@test mytest("PuiseuxPolynomials.jl","p=3x*y^-2+4","Mvp{Int64}: 3xy⁻²+4")
@test mytest("PuiseuxPolynomials.jl","term(p,1)","xy⁻² => 3")
@test mytest("PuiseuxPolynomials.jl","term(p,2)"," => 4")
@test mytest("PuiseuxPolynomials.jl","length(p)","2")
@test mytest("PuiseuxPolynomials.jl","term.(p,1:length(p))","2-element Vector{Pair{Monomial{Int64}, Int64}}:\n xy⁻² => 3\n      => 4")
@test mytest("PuiseuxPolynomials.jl","m=first(term(p,1))","Monomial{Int64}:xy⁻²")
@test mytest("PuiseuxPolynomials.jl","length(m)","2")
@test mytest("PuiseuxPolynomials.jl","m[:x]","1")
@test mytest("PuiseuxPolynomials.jl","m[:y]","-2")
@test mytest("PuiseuxPolynomials.jl","map((x,y)->x=>y,variables(m),powers(m))","2-element Vector{Pair{Symbol, Int64}}:\n :x => 1\n :y => -2")
@test mytest("PuiseuxPolynomials.jl","p","Mvp{Int64}: 3xy⁻²+4")
@test mytest("PuiseuxPolynomials.jl","variables(p)","2-element Vector{Symbol}:\n :x\n :y")
@test mytest("PuiseuxPolynomials.jl","degree(p),degree(p,:x),degree(p,:y)","(0, 1, 0)")
@test mytest("PuiseuxPolynomials.jl","valuation(p),valuation(p,:x),valuation(p,:y)","(-1, 0, -2)")
@test mytest("PuiseuxPolynomials.jl","p","Mvp{Int64}: 3xy⁻²+4")
@test mytest("PuiseuxPolynomials.jl","p^2","Mvp{Int64}: 9x²y⁻⁴+24xy⁻²+16")
@test mytest("PuiseuxPolynomials.jl","p/2","Mvp{Float64}: 1.5xy⁻²+2.0")
@test mytest("PuiseuxPolynomials.jl","p//2","Mvp{Rational{Int64}}: (3//2)xy⁻²+2//1")
@test mytest("PuiseuxPolynomials.jl","Mvp{Float64,Rational{Int}}(p)","Mvp{Float64,Rational{Int64}}: 3.0xy⁻²+4.0")
@test mytest("PuiseuxPolynomials.jl","p=x+y","Mvp{Int64}: x+y")
@test mytest("PuiseuxPolynomials.jl","value(p,:x=>2)","Mvp{Int64}: y+2")
@test mytest("PuiseuxPolynomials.jl","p(x=2)","Mvp{Int64}: y+2")
@test mytest("PuiseuxPolynomials.jl","p(x=2,y=x)","Mvp{Int64}: x+2")
@test mytest("PuiseuxPolynomials.jl","value(p,:x=>2,:y=>x)","Mvp{Int64}: x+2")
@test mytest("PuiseuxPolynomials.jl","p(x=1,y=2)","Mvp{Int64}: 3")
@test mytest("PuiseuxPolynomials.jl","scalar(p(x=1,y=2))","3")
@test mytest("PuiseuxPolynomials.jl","v=(x^(1//2))(x=2.0)","Mvp{Float64,Rational{Int64}}: 1.4142135623730951")
@test mytest("PuiseuxPolynomials.jl","scalar(v)","1.4142135623730951")
@test mytest("PuiseuxPolynomials.jl","exactdiv(x^2-y^2,x-y)","Mvp{Int64}: x+y")
@test mytest("PuiseuxPolynomials.jl","(x+y)/(2x^2)","Mvp{Float64}: 0.5x⁻¹+0.5x⁻²y")
@test mytest("PuiseuxPolynomials.jl","(x+y)//(2x^2)","Mvp{Rational{Int64}}: (1//2)x⁻¹+(1//2)x⁻²y")
@test mytest("PuiseuxPolynomials.jl","(x+y)/(x-y)","Frac{Mvp{Int64, Int64}}: (x+y)/(x-y)")
@test mytest("PuiseuxPolynomials.jl","(x+1)^-2","Frac{Mvp{Int64, Int64}}: 1/(x²+2x+1)")
@test mytest("PuiseuxPolynomials.jl","x+1/(y+1)","Frac{Mvp{Int64, Int64}}: (xy+x+1)/(y+1)")
@test mytest("PuiseuxPolynomials.jl","1-1/(y+1)","Frac{Mvp{Int64, Int64}}: y/(y+1)")
@test mytest("PuiseuxPolynomials.jl","((x+y)/(x-y))(x=y+1)","Mvp{Float64}: 2.0y+1.0")
@test mytest("PuiseuxPolynomials.jl","value((x+y)/(x-y),:x=>y+1;Rational=true)","Mvp{Int64}: 2y+1")
@test mytest("PuiseuxPolynomials.jl","m=[x+y x-y;x+1 y+1]","2×2 Matrix{Mvp{Int64, Int64}}:\n x+y  x-y\n x+1  y+1")
@test mytest("PuiseuxPolynomials.jl","n=inv(Frac.(m))","2×2 Matrix{Frac{Mvp{Int64, Int64}}}:\n (-y-1)/(x²-2xy-y²-2y)  (x-y)/(x²-2xy-y²-2y)\n (x+1)/(x²-2xy-y²-2y)   (-x-y)/(x²-2xy-y²-2y)")
@test mytest("PuiseuxPolynomials.jl","lcm(denominator.(n))","Mvp{Int64}: x²-2xy-y²-2y")
@test mytest("PuiseuxPolynomials.jl","@Mvp x;conj(im*x+1)","Mvp{Complex{Int64}}: (0 - 1im)x+1 + 0im")
@test mytest("PuiseuxPolynomials.jl","a=x^2+x*y","Mvp{Int64}: x²+xy")
@test mytest("PuiseuxPolynomials.jl","degree(a), degree(a,:y), degree(a,:x)","(2, 1, 2)")
@test mytest("PuiseuxPolynomials.jl","@Mvp x,y; a=x^2+x*y","Mvp{Int64}: x²+xy")
@test mytest("PuiseuxPolynomials.jl","valuation(a), valuation(a,:y), valuation(a,:x)","(2, 0, 1)")
@test mytest("PuiseuxPolynomials.jl","@Mvp x,y; p=(x-y)^3","Mvp{Int64}: x³-3x²y+3xy²-y³")
@test mytest("PuiseuxPolynomials.jl","coefficient(p,Monomial(:x,:x,:y))","-3")
@test mytest("PuiseuxPolynomials.jl","coefficient(p,Monomial())","0")
@test mytest("PuiseuxPolynomials.jl","p=(x+y+inv(y))^4","Mvp{Int64}: x⁴+4x³y+4x³y⁻¹+6x²y²+12x²+6x²y⁻²+4xy³+12xy+12xy⁻¹+4xy⁻³+y⁴+4y²+6+4y⁻²+y⁻⁴")
@test mytest("PuiseuxPolynomials.jl","coefficients(p,:x)","Dict{Int64, Mvp{Int64, Int64}} with 5 entries:\n  0 => y⁴+4y²+6+4y⁻²+y⁻⁴\n  4 => 1\n  2 => 6y²+12+6y⁻²\n  3 => 4y+4y⁻¹\n  1 => 4y³+12y+12y⁻¹+4y⁻³")
@test mytest("PuiseuxPolynomials.jl","coefficients(p,:y)","Dict{Int64, Mvp{Int64, Int64}} with 9 entries:\n  0  => x⁴+12x²+6\n  4  => 1\n  -1 => 4x³+12x\n  2  => 6x²+4\n  -3 => 4x\n  -2 => 6x²+4\n  -4 => 1\n  3  => 4x\n  1  => 4x³+12x")
@test mytest("PuiseuxPolynomials.jl","@Mvp x,y; p=(x+y^(1//2)+1)^3","Mvp{Int64,Rational{Int64}}: x³+3x²y½+3x²+3xy+6xy½+3x+y³⁄₂+3y+3y½+1")
@test mytest("PuiseuxPolynomials.jl","coefficient(p,:y,1//2)","Mvp{Int64,Rational{Int64}}: 3x²+6x+3")
@test mytest("PuiseuxPolynomials.jl","coefficient(p,:x,1)","Mvp{Int64,Rational{Int64}}: 3y+6y½+3")
@test mytest("PuiseuxPolynomials.jl","@Mvp x; @Pol q; Pol(x^2+x)","Pol{Int64}: q²+q")
@test mytest("PuiseuxPolynomials.jl","p=(x+y^(1//2))^3","Mvp{Int64,Rational{Int64}}: x³+3x²y½+3xy+y³⁄₂")
@test mytest("PuiseuxPolynomials.jl","Pol(:q); Pol(p,:x)","Pol{Mvp{Int64, Rational{Int64}}}: q³+3y½q²+3yq+y³⁄₂")
@test mytest("PuiseuxPolynomials.jl","@Pol q","Pol{Int64}: q")
@test mytest("PuiseuxPolynomials.jl","Mvp(q^2+q)","Mvp{Int64}: q²+q")
@test mytest("PuiseuxPolynomials.jl","@Mvp x,y,z","nothing")
@test mytest("PuiseuxPolynomials.jl","variables([x+y+1,z])","3-element Vector{Symbol}:\n :x\n :y\n :z")
@test mytest("PuiseuxPolynomials.jl","p=Mvp(:x)+1","Mvp{Int64}: x+1")
@test mytest("PuiseuxPolynomials.jl","w=p(x=4)","Mvp{Int64}: 5")
@test mytest("PuiseuxPolynomials.jl","scalar(w)","5")
@test mytest("PuiseuxPolynomials.jl","typeof(scalar(w))","Int64")
@test mytest("PuiseuxPolynomials.jl","p=-2+7x^5*inv(y)","Mvp{Int64}: 7x⁵y⁻¹-2")
@test mytest("PuiseuxPolynomials.jl","p(x=2)","Mvp{Int64}: -2+224y⁻¹")
@test mytest("PuiseuxPolynomials.jl","p(y=1)","Mvp{Int64}: 7x⁵-2")
@test mytest("PuiseuxPolynomials.jl","p(x=2,y=1)","Mvp{Int64}: 222")
@test mytest("PuiseuxPolynomials.jl","p(x=y)","Mvp{Int64}: 7y⁴-2")
@test mytest("PuiseuxPolynomials.jl","p(x=y,y=x)","Mvp{Int64}: -2+7x⁻¹y⁵")
@test mytest("PuiseuxPolynomials.jl","p=x^(1//2)*y^(1//3)","Mvp{Int64,Rational{Int64}}: x½y⅓")
@test mytest("PuiseuxPolynomials.jl","p(;x=y)","Mvp{Int64,Rational{Int64}}: y⅚")
@test mytest("PuiseuxPolynomials.jl","p(;x=4)","Mvp{Int64,Rational{Int64}}: 2y⅓")
@test mytest("PuiseuxPolynomials.jl","p(;y=2.0)","Mvp{Float64,Rational{Int64}}: 1.2599210498948732x½")
@test mytest("PuiseuxPolynomials.jl","@Mvp x,y","nothing")
@test mytest("PuiseuxPolynomials.jl","(x+y)^[1 2;3 1]","Mvp{Int64}: 3x+4y")
@test mytest("PuiseuxPolynomials.jl","@Mvp x,y;p=7x^5*y^-1-2","Mvp{Int64}: 7x⁵y⁻¹-2")
@test mytest("PuiseuxPolynomials.jl","derivative(p,:x)","Mvp{Int64}: 35x⁴y⁻¹")
@test mytest("PuiseuxPolynomials.jl","derivative(p,:y)","Mvp{Int64}: -7x⁵y⁻²")
@test mytest("PuiseuxPolynomials.jl","derivative(p,:x,:y)","Mvp{Int64}: -35x⁴y⁻²")
@test mytest("PuiseuxPolynomials.jl","p=x^(1//2)*y^(1//3)","Mvp{Int64,Rational{Int64}}: x½y⅓")
@test mytest("PuiseuxPolynomials.jl","derivative(p,:x)","Mvp{Rational{Int64},Rational{Int64}}: (1//2)x⁻½y⅓")
@test mytest("PuiseuxPolynomials.jl","derivative(p,:y)","Mvp{Rational{Int64},Rational{Int64}}: (1//3)x½y⁻⅔")
@test mytest("PuiseuxPolynomials.jl","derivative(p,:z)","Mvp{Rational{Int64},Rational{Int64}}: 0")
@test mytest("PuiseuxPolynomials.jl","gcd(x^2-y^2,(x+y)^2)","Mvp{Int64}: -x-y")
@test mytest("PuiseuxPolynomials.jl","laurent_denominator(x^-1,y^-2+x^4)","Monomial{Int64}:xy²")
@test mytest("PuiseuxPolynomials.jl","lcm(x^2-y^2,(x+y)^2)","Mvp{Int64}: -x³-x²y+xy²+y³")
@test mytest("PuiseuxPolynomials.jl","@Mvp x,y,z; F=[x^2+y^2+z^2-1,x^2-y+z^2,x-z]","3-element Vector{Mvp{Int64, Int64}}:\n x²+y²+z²-1\n x²-y+z²\n x-z")
@test mytest("PuiseuxPolynomials.jl","grobner_basis(F)","3-element Vector{Mvp{Int64, Int64}}:\n x-z\n -y+2z²\n 4z⁴+2z²-1")
@test mytest("PuiseuxPolynomials.jl","grobner_basis(F;lt=grlex)","3-element Vector{Mvp{Int64, Int64}}:\n x-z\n y²+y-1\n -y+2z²")
@test mytest("PuiseuxPolynomials.jl","grobner_basis(F;lt=grevlex)","3-element Vector{Mvp{Int64, Int64}}:\n x-z\n y²+y-1\n 2x²-y")
@test mytest("PuiseuxPolynomials.jl","@Mvp x,y,z; p=x+y+z","Mvp{Int64}: x+y+z")
@test mytest("PuiseuxPolynomials.jl","rename_variables(p,Symbol.('A':'Z'))","Mvp{Int64}: A+B+C")
@test mytest("PuiseuxPolynomials.jl","rename_variables(p,[:U,:V])","Mvp{Int64}: U+V+z")
@test mytest("PuiseuxPolynomials.jl","rename_variables(p,:x=>:U,:z=>:V)","Mvp{Int64}: U+V+y")
end
end
